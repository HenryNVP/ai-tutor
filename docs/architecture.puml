@startuml
skinparam componentStyle rectangle
skinparam wrapWidth 200
skinparam maxMessageSize 200
title AI Tutor – Multi-Agent Architecture

actor User

package "Entry Points" {
  component "CLI (`ai-tutor`)" as CLI
  component "Web UI\n(tutor_web.py)" as WebUI
  component "Quiz UI\n(apps/ui.py)" as QuizUI
  component "Python API" as PythonAPI
}

node "TutorSystem" as TutorSystem {
  component "Settings Loader\n& Logging" as Settings
  component "IngestionPipeline" as Ingestion
  component "Orchestrator Agent\n(tutor_orchestrator)" as Orchestrator
  component "QA Agent\n(qa_agent)" as QA
  component "Web Agent\n(web_agent)" as Web
  component "Ingestion Agent\n(ingestion_agent)" as IngestionAgent
  component "Retriever" as Retriever
  component "EmbeddingClient" as EmbeddingClient
  component "SearchTool" as SearchTool
  component "VectorStore\n(SimpleVectorStore)" as VectorStore
  component "ChunkJsonlStore" as ChunkStore
  component "QuizService" as QuizService
  component "ProgressTracker" as ProgressTracker
  component "PersonalizationManager" as Personalizer
  component "Parsers" as Parsers
  component "Chunker" as Chunker
}

database "Vector Store\n(data/vector_store)" as VectorFS
database "Chunks Index\n(data/processed/chunks.jsonl)" as ChunkFS
database "Learner Profiles\n(data/processed/profiles/*.json)" as ProfileFS
database "Session History\n(data/processed/sessions.sqlite)" as SessionFS
folder "Raw Documents\n(data/raw)" as RawDocs
cloud "OpenAI API\n(gpt-4o-mini)" as OpenAI
cloud "Embedding Provider\n(sentence-transformers)" as EmbeddingProvider

User --> CLI
User --> WebUI
User --> QuizUI
User --> PythonAPI

CLI --> Ingestion : `ingest` command
CLI --> Orchestrator : `ask` command
WebUI --> Orchestrator : answer_question
QuizUI --> QuizService : generate & evaluate
PythonAPI --> TutorSystem : all operations

Ingestion --> Parsers : parse PDFs/Markdown
Parsers --> RawDocs : read documents
Ingestion --> Chunker : create chunks
Chunker --> EmbeddingClient : embed chunks
EmbeddingClient --> EmbeddingProvider : generate vectors
Ingestion --> VectorStore : store embeddings
VectorStore --> VectorFS : persist .npy + metadata
Ingestion --> ChunkStore : save chunks
ChunkStore --> ChunkFS : persist .jsonl

Orchestrator --> QA : STEM questions
Orchestrator --> Web : current events/non-STEM
Orchestrator --> IngestionAgent : file uploads
Orchestrator --> QuizService : quiz requests
Orchestrator --> SessionFS : maintain context

QA --> Retriever : retrieve_local_context
Retriever --> EmbeddingClient : embed query
Retriever --> VectorStore : cosine search
Web --> SearchTool : web_search

QuizService --> Retriever : find relevant content
QuizService --> OpenAI : generate questions
QuizService --> ProgressTracker : update profiles
ProgressTracker --> ProfileFS : save learner data
ProgressTracker --> Personalizer : track mastery

Orchestrator --> OpenAI : stream responses
QA --> OpenAI : generate cited answers
Web --> OpenAI : synthesize web results

note right of Orchestrator
  Pure Router - delegates to specialists:
  • STEM → qa_agent (with citations)
  • News/Current → web_agent
  • Uploads → ingestion_agent
  • Quizzes → QuizService
  Daily session rotation prevents token overflow
end note

note right of QuizService
  1. Generate adaptive quizzes
  2. Evaluate learner answers
  3. Update profiles based on score:
     - Domain strengths/struggles
     - Concepts mastered count
     - Difficulty preferences
     - Total study time
end note

note left of VectorStore
  Semantic search over
  local course materials
  with cosine similarity
end note

@enduml
